
h1. Sneaking git through the backdoor: git-svn

A great way to introduce git into your organization is...not to! Your team or management can be resistant to change, but that doesn't mean you can't start reaping the benefits of git's fully offline repositories, fast logs, topic branches, and changeset management.

By using git-svn you can get all the benefits of git while pushing your commits to an svn repository. When you're ready, you can migrate to a fully git-based solution in only two commands.

h3. Setting up git-svn to track a remote svn repository
 
With pure git, you use @git clone@ to make a copy of someone's repository to do work on it. With svn, we use @git svn clone@. 

@git svn clone [svn-url]@

Note that the initial clone command may take some time as it copies your entire subversion repo all the way to the beginning of time and creates an analogous git repo. The git repo typically takes up a fraction of the space that the original svn repo did.

After the command finishes, you have a standard git repo with one special feature. If you take a look at your @.git/config@ file, you'll notice there is now an entry for the connection to svn:

<pre>
  [svn-remote "svn"]
    url = http://url/to/your/svn/repo
    fetch = trunk:refs/remotes/trunk
    tags = tags/*:refs/remotes/tags/*
</pre>

This enables you to push and pull changes from svn. However, instead of using the commands @git push@ and @git pull@ to do so, you will use @git svn dcommit@ to push (equivalent to svn commit), and @git svn rebase@ to pull (equivalent to svn update). While these commands have obscure names, they work similarly to @push@ and @pull --rebase@. Note that you can make any number of commits locally and then @dcommit@ to push them all as individual svn commits.

Now use @git branch -rv@ to see the remote branches. Remember, as with any git repo you never work with remote branches directly. So if you're looking to work with a branch, make a local tracking branch for it.

<pre>
  git nb 1.1.2 branches/1.1.2
  
  # hack
  git ci -a -m "made changes on the branch"
  git svn dcommit # goes to branch 1.1.2
</pre>


For more on git-svn, please see <a href="http://tsunanet.blogspot.com/2007/07/learning-git-svn-in-5min.html">http://tsunanet.blogspot.com/2007/07/learning-git-svn-in-5min.html</a>

h3. Mapping non conventional svn layouts to git

If your project uses an unconventional branch layout in subversion, for example branches/1.0.1/module instead of module/branches/1.0.1, you can still use git-svn by making a modification to your .git/config file to properly map the branches. Note the special _*_ syntax in the branches line below. 

[svn-remote "svn"]
  url = http://company.com/svn/projects
  fetch = trunk/project-foo:refs/remotes/project-foo/trunk
  branches = branches/*/project-foo:refs/remotes/vamp-ui/branches/*

h3. Migrating to git: keeping svn and git in sync

From git's perspective, your git-svn repo is not different from any other git repo. So in order to push it out to a remote place, we follow the same steps we would for any git remote repo:

<pre>
  git remote add origin [github url]
  git push
</pre>

You can now get sneaky and start pulling changes from your team via svn, and pushing it to github:

<pre>
  git svn rebase
  git push
</pre>

Like magic. However, this is only recommended as a temporary solution because the svn rebase, like any rebase, will rewrite your commit id's, causing the possibility that anyone you're sharing code with via github may have a problem with your commits.

Nonetheless, this is an effective way to get your code up to github so that you can do code review comments until the rest of your team members are ready to switch to git. When they are, they can simply clone the repo url from github, and proceed as normal.