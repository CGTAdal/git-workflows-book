<style type="text/css" media="screen">
  p {
    width: 40em;
    font-family: Helvetica, Arial, "MS Trebuchet", sans-serif;
  }
</style>
<center>
<div style='font-size:64px; font-family: Helvetica'>Git Workflows</div>
<div style='font-size:18px; font-family: Helvetica'>by Yan Pritzker</div>
<div style='font-size:18px; font-family: Helvetica'>skwpspace.com</div><br/>
<div style='font-size:18px; font-family: Helvetica; color: #ccc; font-size:11px'>*extremely unfinished beta book in progress*</div>
<div style='font-size:10px; color: #ccc'>Copyright 2009, Yan Pritzker. All Rights Reserved.</div>
<br/>
</center>

h1. Why use git

Git is an extremely powerful source control system. Its power lies in its speed and flexibility, but this can also be a point of confusion for many new users. Git is unfortunately quite inconsistent in its syntax, and exposes many of its not-so-friendly internals to the outside world, sometimes to the detriment of usability. 

As many systems built by hardcore engineers (Git came from Linux kernel hackers), if wielded by a wizard, it can be used to achieve many great things, but can be initially confusing even for seasoned developers. This book bypasses the ugly internals of git and gets to the heart of improving your development workflows by using git.

If you've picked up this book, it's likely you're already convinced that git is great. For a great overview, check out http://whygitisbetterthanx.com. To sum it up, the following are my favorite features of git, which this book will focus on.

h3. Offline productivity, speed, and multitasking

Git encourages multitasking and experimentation. Fast and easy local branching means the ability to keep bugs and features you're working on in different workspaces, and to experiment more with throwaway branches. Having everything local means you can have fast diffs and history logs, and commit to your repo while on the go without being online.

h3. Remote collaboration and code review

The ability to pull down other people's changesets for code review and collaboration is made easy with git's multiple remotes capability. Being able to create cheap local branches and experiment with integrating other developer's changesets makes it ideal for open source projects and outsourced collaboration with junior developers, where you want to review other people's code before it becomes part of the master branch. And because anyone who has access to a repo can clone it, they can do development on a fork without asking for your approval, which also encourages experimentation.

h3. Changeset cleanliness

How many times have you tried to trace down a feature across many commits, or even worse, tease apart changesets that are clusters of unrelated features? Git offers multiple ways to keep changesets clean, from the index/staging area, to topic branches, to amending commits and completely rewriting your commit history. It's amazing what clean changesets can do to save you time in code review and release management.

h3. How is this book different from other git books?

Many git books explain git from the bottom up, starting with its internals. Although git sometimes has many ways of doing the same thing, this book will ignore some of the more obscure or advanced features of git in favor of using a basic set of tools to get things done. It's an opinionated book, offering you my own view on how things should be done based on my experiences with git.

Many newcomers to git make the mistake of not taking the time to understand what git does, treating git like their old centralized source control system, and getting frustrated by the number of commands they have to remember to work with new concepts like the index (staging area), their local repo, and remote repos. 

If you create a model in your head of what git is doing, you'll be quickly on your way to mastery. Understanding what's happening under the hood relieves you of the burden of having to memorize commands that seemingly make no sense at the outset. It's like understanding how a formula is derived instead of memorizing the formula. Once you understand the model, it will become second nature to work with the various parts of your git repository. 

If you are new to git, I highly urge you to read at least one of the following resources:

* <a href="http://book.git-scm.com/index.html">Git Community Book</a>
* <a href="http://peepcode.com/products/git-internals-pdf">Git Internals by Peepcode</a>

As the Peepcode book says, "Git != Subversion + Magic!". This is an important mantra that everyone reading this book should understand. Commit some time to learning what git does, and you will be rewarded. However, if you do decide to bypass the intro books, this book will give you enough of an overview so that you can dive right in. It will also provide you with a handy list of aliases making certain of features of git easier to work with.

There are also many great cheatsheets availble on the web including:

* <a href="http://swxruby.org/git-cheat-sheet.pdf">http://swxruby.org/git-cheat-sheet.pdf</a> with a great diagram
* <a href="http://github.com/guides/git-cheat-sheet">http://github.com/guides/git-cheat-sheet</a>
* <a href="http://cheat.errtheblog.com/s/git">http://cheat.errtheblog.com/s/git</a>

*Chapter 1* will start with a brief review of how a git repository is structured. You'll also get your git environment set up with some enhancements to your bash prompt, and be given a simplified git alias list that will help you work with git on a daily basis without remembering obscure command line switches. 

*Chapter 2* will teach you to treat your changesets like you do your code, by keeping them clean, cohesive, and refactoring them when needed. You'll learn to use topic branches as workspaces to work on multiple features or bugs, and to combine or tease apart changes to keep patch history clean.

*Chapter 3* shows you how to use your repository history to jump back and forth between different commit states, revert changes, and search the repository for commits.

*Chapter 4* talks about remote collaboration and code review. You'll learn about remote branches, using GitHub and its forking system, and doing remote pair programming by sharing your branches with your team.

*Chapter 5* focuses on release management including tagging, branching, and cherry picking commits between dev and release branches.

*Chapter 6* is about introducing git into your organization through an unobtrusive bottom-up process, and using git while everyone else is using subversion.