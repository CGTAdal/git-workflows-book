h1. What this screencast covers

 * Ways to improve changeset cleanliness and work efficiency 
 * GitHub, remote collaboration, and code review
 * Release management and workflow
 * Sneaking git in through the backdoor (git-svn)

h1. Setting up your environment

 * Link to full .gitconfig file recommended for this screencast
 * Bash completion, git branch in prompt, colors
 * Automatic cleanup and compression of the repo
 * Better merge and cherry-pick messages 
 * Two useful aliases: unstage and uncommit
 
h1. Git workflow philosophy used in this screencast

 * One branch per feature, one feature per commit
 * Don't pollute master: Work is done in topic branches
 * Branch naming conventions (name branches as ticket numbers)
 * Releases generally made from _master_
 * Remote collaboration and code review as a combination of branches and forks
 
h1. Keeping your changesets clean
 
 * Using the index as a staging area
 * Making several commits from one set of changes
 * Staging unrelated changes within one file
 * Handling deleted files: git addall
 * Using topic branches as workspaces
 * One branch per feature/bug philosophy
 * Coming back to unfinished work on a topic branch
 * Fixing the last commit
 * Using the stash to temporarily hide your changes
 * Keeping a topic branch in sync with its parent
 * Changing commit history after the fact 

h1. Mastering history and logging

 * Searching through commits and commit messages
 * Resetting the working tree + cleanup (git clean -f) 
 * Restoring a file or directory to a past state
 * Throwing away commits
 * Reverting a commit
 * Reverting changes to one file only
 * Find lost or deleted commits using reflog
 * Figuring out who changed a file (git blame -w)
 * Using git bisect to find which commit broke a feature
 
h1. Remote collaboration and code review

 * Using git remotes for collaboration
 * Set up your remote at GitHub
 * git-remote-branch, a handy automation for remote branches
 * Creating and pushing to remote branches
 * Deleting a remote branch

 * Pulling changes from a remote
 * Long lived remote collaboration using rebase
 * Pulling changes using merge

 * Core committer collaboration workflow
 * Squashing for code review

 * Outside contributor collaboration workflow  
 * Setting up remote contributor forks
 * Taking a look at contributorâ€™s work
 * Merge/squashing contributor work 
 * Giving credit to patch authors when squashing
   
 * Cleaning up stale remote tracking branches
 * Force-overwriting remote history

 * Conflict management
 * Dealing with conflicts during merges
 * Dealing with conflicts during rebase
 * Using merging UIs - git mergetool
   
 * Serving up your local repo to a friend

h1. Release management with git

 * Creating the release branch
 * Tagging release branchpoints 
 * Using cherry-pick to move changesets into a release
 * Generating release changelogs
 * Figuring out when a branch was made (git merge-base)
 * Capistrano support for deploying git branches

h1. Sneaking git through the backdoor: git-svn

 * Setting up git-svn to track a remote svn repository
 * Mapping non conventional svn layouts to git
 * Migrating to git: keeping svn and git in sync
 * The last step: abandoning svn
 * Caveats (commit id rewriting and the dangers of svn rebase)
 * Creating a local GitHub mirror as a safety net
 